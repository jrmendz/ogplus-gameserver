const CACHE=require("../helpers/cache"),PAYOUT=require("../../config/payouts"),ENV=require("../../config/env/"+appEnvironment),GAME=appEnvironment,HTTP=require("request");function Game(){}Game.prototype.processInput=((e,a)=>{let r,t,l=e.data.cards.player,s=e.data.cards.banker,n=e.data.shoeDate,i=e.table;if(_.isUndefined(n))return a({error:"Invalid parameter: [shoeDate]"});if(_.isUndefined(i))return a({error:"Invalid parameter: [tableNumber]"});if(r={getShoeHand:["checkWinner",(e,a)=>{if(_.isUndefined(tables[i].shoeGame))return a({error:"Invalid ShoeGame value"});ShoeHand.findOne({shoehandnumber:tables[i].shoeGame},a)}],getTableNo:["checkWinner",(e,a)=>{TableNo.findOne({tableNumber:i},a)}],getResultList:["checkWinner",(e,a)=>{const r=e.checkWinner;console.log("gameResult@getResultList",r),ResultList.findOne({results:r},(e,r)=>(console.log("resultlist@getResultList",r),a(e,r)))}],saveResult:["getShoeHand","getTableNo","getResultList",(e,a)=>{let r=e.getShoeHand,t=e.getTableNo,l="result_"+i,s=e.getResultList;return _.isUndefined(r)?a({error:"Invalid shoeHand"}):_.isUndefined(t)?a({error:"Invalid tableNo"}):_.isUndefined(s)?a({error:"Invalid resultList"}):void Result.create({idTableNo:t.id,idShoeHand:r.id,idResultList:s.id,shoeDate:n},(e,r)=>{if(e)return a({error:e});CACHE.set(l,r,86400,e=>(console.log("ResultId: "+r.id+" inserted!"),a(e,r)))})}]},_.isEqual(GAME,"baccarat")){if(_.isUndefined(l))return a({error:"Invalid parameter: [playerCards]"});if(_.isUndefined(s))return a({error:"Invalid parameter: [bankerCards]"});t={playerCardValues:e=>{for(let a in l)if(l[a+"value"]=cardValue(l[a]),_.isEmpty(l[a+"value"])&&""!==l[a])return console.error("invalid card : %s",l[a]),e("invalid_card");return e(null,l)},bankerCardValues:e=>{for(let a in s)if(s[a+"value"]=cardValue(s[a]),_.isEmpty(s[a+"value"])&&""!==s[a])return console.error("invalid card : %s",s[a]),e("invalid_card");return e(null,s)},checkWinner:["playerCardValues","bankerCardValues",(e,a)=>{const r=e.playerCardValues,t=e.bankerCardValues;checkWinner(r,t,(e,r)=>a(e,r))}],saveCardValues:["saveResult","playerCardValues","bankerCardValues",(e,a)=>{let r=e.saveResult,t=e.playerCardValues,l=e.bankerCardValues,s=[t.card1,t.card2,t.card3],n=[l.card1,l.card2,l.card3];GameValue.create({values:{playerCards:s.join(),bankerCards:n.join()},gameType:ENV.gameCode.baccarat,resultId:r.id},a)}],cacheTotal:["saveResult",(e,a)=>{const r=e.checkWinner,t="total_"+i;CACHE.get(t,(e,l)=>{let s=l||{totalResult:{player:0,banker:0,tie:0,bankerPair:0,playerPair:0}};return _.startsWith(r,"banker")&&s.totalResult.banker++,_.startsWith(r,"player")&&s.totalResult.player++,_.startsWith(r,"tie")&&s.totalResult.tie++,_.includes(r,"banker_pair")&&s.totalResult.bankerPair++,_.includes(r,"player_pair")&&s.totalResult.playerPair++,CACHE.set(t,s,86400,(e,a)=>{}),tables[i].totalResult=s.totalResult,a()})}],cacheRoad:["saveResult",(e,a)=>{const r=e.playerCardValues,t=e.bankerCardValues,l=e.checkWinner,s="road_"+i,n=[r.card1,r.card2,r.card3],d=[t.card1,t.card2,t.card3];CACHE.get(s,(e,r)=>{let t=r||{road:[]};const o={shoeGame:tables[i].shoeGame,result:l,cards:{player:n.join(),banker:d.join()},videoUrl:""};return t.road.push(o),CACHE.set(s,t,86400,(e,a)=>{}),tables[i].road=t.road,a()})}]},Object.assign(r,t)}else _.isEqual(GAME,"dragontiger")||_.isEqual(GAME,"moneywheel");async.auto(r,(e,r)=>{const t=r.playerCardValues,l=r.bankerCardValues;return a(e&&"invalid_card"!==e?{error:e,cards:{player:t,banker:l}}:e?{error:e}:{result:r.checkWinner,cards:{player:t,banker:l}})})}),module.exports=Game;
